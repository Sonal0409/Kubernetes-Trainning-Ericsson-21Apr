
Secrets:
========================

# vim secrets.yml

apiVersion: v1

kind: Secret

metadata:

 name: mysql-pwd

data:

 password: "ZGJhQDEyMw=="


save the file

# kubectl create -f secrets.yml

# kubectl get secrets


Use secret in the deploymment

# vim msql-deployment.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
 replicas: 1
 selector:
  matchLabels:
   app: mysql
 template:
   metadata:
     labels:
       app: mysql
   spec:
    containers:
      - name: mysqlc1
        image: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
           secretKeyRef:
             name: mysql-pwd
             key: password

Save the file

# kubectl create -f msql-deployment.yml

# kubectl get all

===========================================================================

Mini Project -> NFS storage, deployment, services, PV, PVC, secrets, configMaps
========================================

## Create an NFS server       

...


sudo mkdir -p /data
ls -alrt /data/

...

## Install the NFS kernel server on the machine

...

sudo apt install nfs-kernel-server

...

## Change the owner user and group to nobody and nogroup

...

sudo chown nobody:nogroup /data/

Set permissions to 777 to allow everyone to read, write, and execute files in this directory

sudo chmod 777 /data/

...

## Open the exports file in the /etc directory for permission to access the host server machine

...

sudo vi /etc/exports

Add the following code to the file:

/data 	*(rw,sync,no_root_squash)

Note: Exit the file and save the changes

...

Here:
/data – is the share folder which server wants to share
rw – This will all the clients to read and write the files to the share directory.
sync – which will confirm the shared directory once the changes are committed.
no_root_squash – This will all the root user to connect to the designated directory.

## Use the exportfs command to export all shared folders you registered in the /etc/exports file after making the appropriate changes

sudo exportfs -rv

## Restart the NFS kernel server to apply the configuration changes

sudo systemctl restart nfs-kernel-server

## Deploy NFS client on worker nodes

sudo apt install nfs-common

## Create a MySQL manifest file and deploy it using NFS-based persistent volume

...

kubectl apply -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day5-Notes/mysql.yml

...

Note: The below section may change if you have a different NFS server and share folder available:

  nfs:
    path: /data
    server: 172.31.58.69


kubectl get all

kubectl get pv

kubectl get pvc

kubectl get pods

## Create a WordPress manifest file and deploy it using host-path-based persistent volume

...

kubectl apply -f https://raw.githubusercontent.com/Sonal0409/Container-Orchestration-using-Kubernetes/main/Day5-Notes/wordpress.yml

...

kubectl get all

kubectl get pv

kubectl get pvc

kubectl get pods

Then, open the browser and put the below URL to access the WordPress application


===================================================
Scheduling techniques in Kubernetes:
=================================================

Label the nodes:

# kubectl label node kworker1 disk=hdd
# kubectl label node kworker2 disk=ssd


# vim selector-1.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeploy
spec:
 replicas: 2
 selector:
  matchLabels:
    app: webserver
 template:
   metadata:
     labels:
       app: webserver
   spec:
    nodeName: kworker1
    containers:
      - name: c1
        image: nginx


save the file

# kubectl create -f selector-1.yml
# kubectl get pods -o wide

# vim selector-2.yml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeploy
spec:
 replicas: 2
 selector:
  matchLabels:
    app: webserver
 template:
   metadata:
     labels:
       app: webserver
   spec:
    nodeSelector:
     disk: ssd
    containers:
      - name: c1
        image: nginx


save the file

# kubectl delete deployment --all
# kubectl create -f selector-2.yml

# kubectl get pods -o wide


# vim selector-3.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mydeploy
spec:
 replicas: 2
 selector:
  matchLabels:
    app: webserver
 template:
   metadata:
     labels:
       app: webserver
   spec:
    affinity:
      nodeAffinity:
       requiredDuringSchedulingIgnoredDuringExecution:
         nodeSelectorTerms:
           - matchExpressions:
               - key: disk
                 operator: In
                 values:
                  - ssd
    containers:
      - name: c1
        image: nginx

save the file

# kubectl delete deployment --all
# kubectl create -f selector-3.yml

# kubectl get pods -o wide

Change the label on the worker 2.. you will the pods continue to run on same node

kubectl label --overwrite node kworker2 disk=ssd123















