
# kubectl label nodes kworker1 color=red

# vim node-selecotr-2.yml

apiVersion: v1
kind: Pod
metadata:
  name: pod-selector 
  labels:
    app: webserver 
spec:
 containers:
   - name: c1
     image: nginx 
 affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 1
        preference:
          matchExpressions:
           - key: disk 
             operator: In
             values:
               - hdd 
               - ssd
      - weight: 2
        preference:
           matchExpressions:
            - key: color
              operator: In
              values:
               - red


save the file and run

# kubectl get pods -o wide

TAINTS AND TOLERATIONS:
===============================

Step 1: Create a deployment with some replicas

# kubectl delete deployment --all

# vim deployment-taint.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-1
spec:
 replicas: 6
 selector:
  matchLabels:
   app: mysql-wordpress
   product: mysql
 template:
   metadata:
     labels:
       app: mysql-wordpress
       product: mysql
   spec:
    containers:
      - name: mysqlc1
        image: nginx


# save and run the deployment

# kubectl create -f deployment-taint.yml

# kubectl get pods -o wide 

Now taint the worker 2 with effects as NoExecute

# kubectl taint node kworker2 color=red:NoExecute 

# kubectl get pods -o wide 

Pods from worker 2 will be terminated and will be scheduled on worker 1

Lets us remove the taint
# kubectl taint node kworker2 color=red:NoExecute-

We can scale down the deployment

# kubectl scale deployment deploy-1 --replicas=0

Scale up

# kubectl scale deployment deploy-1 --replicas=3 

Now taint the worker 2 with effects as NoSchedule

# kubectl taint node kworker2 color=red:NoSchedule

Pods continue to run on the worker2

Scale up

# kubectl scale deployment deploy-1 --replicas=5

PODs are not scheduled on worker2

=====================================
Tolerations:
=====================================

We will do a new deployment - with toleration for worker node with colo=red:NoSchedule


# vim dpeloyment-2.yml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: deploy-2
spec:
 replicas: 6
 selector:
  matchLabels:
   app: mysql-wordpress
   product: mysql
 template:
   metadata:
     labels:
       app: mysql-wordpress
       product: mysql
   spec:
    tolerations: # permissions to get created even on a tainted node
      - key: color
        operator: "Equal"
        value: red
        effect: NoSchedule
    containers:
      - name: mysqlc1
        image: nginx


save the yaml and run it

# kubectl create -f deployment-2.yml

Pods will be scheduled on worker2 also.

=======================================================================
Namespaces, Kube configurations, contexts, roles and role binding
======================================================================

1. Create a namespace by using the following command:

# kubectl create namespace dev

2. Create a directory dev

mkdir dev
cd dev

3. Generating an RSA private key and certificate requests for Dave

First we need to generate a private rsa key and a CSR. The private key can easily be created with this command:

# openssl genrsa -out dave.key 2048

4. Use the following command to generate certificate requests:

# openssl req -new -key dave.key -out dave.csr

Organisation (O) field: this will be used to identify the group against the API Server ==> dev

Common Name (CN) field: this will be used to identify him against the API Server ==> dave

5. Once the .csr file is created, Dave needs to send it to us (admins) so we can sign it using the cluster Certificate Authority. 

Run the following command to link an identity to a private key using a digital signature.

# openssl x509 -req -in dave.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out dave.crt -days 500


Setting credentials to the user

Set credentials to dave:

# kubectl config set-credentials dave --client-certificate=/home/labuser/dev/dave.crt --client-key=/home/labuser/dev/dave.key


Set context to dave:

# kubectl config set-context dave-context --cluster=kubernetes --namespace=dev --user=dave


Run the following command to display current contexts:

# kubectl config get-contexts


8. Creation of a Role
Letâ€™s first create a Role resource with the following specification:

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:       
   namespace: dev
   name: dave-role    
rules:
- apiGroups: ["", "extensions", "apps"]    
  resources: ["deployments", "pods", "services"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

kubectl create -f role.yml

kubectl get roles -n dev

9. Creation of a RoleBinding
The purpose of a RoleBinding is to link a Role (list of authorized actions) and a user or a group. 
In order for Dave to have the rights specified in the above Role, we need to bind him to this Role. 
We will use the following RoleBinding resource for this purpose:

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
 name: role-dave
 namespace: dev
subjects:
- kind: User
  name: dave
  apiGroup: ""
roleRef:
  kind: Role
  name: dave-role
  apiGroup: ""

kubectl create -f rolebinding.yml

kubectl get rolebinding -n dev



Run the following command to display current contexts:

# kubectl config get-contexts

Set the dave context  and test it

kubectl config use-context dave-context












































































